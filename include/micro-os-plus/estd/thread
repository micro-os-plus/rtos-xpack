/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * The code is inspired by LLVM libcxx and GNU libstdc++-v3.
 */

#ifndef CMSIS_PLUS_ESTD_THREAD_
#define CMSIS_PLUS_ESTD_THREAD_

// ----------------------------------------------------------------------------

// Include the next <thread> file found in the search path.
#pragma GCC diagnostic push
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wgnu-include-next"
#endif
#include_next <thread>
#pragma GCC diagnostic pop

#include <type_traits>
#include <functional>

#include <micro-os-plus/rtos/os.h>

#include <micro-os-plus/estd/chrono>

// ----------------------------------------------------------------------------

namespace os
{
  namespace estd
  {
  // ------------------------------------------------------------------------

  /**
   * @ingroup cmsis-plus-iso
   * @{
   */

#include "thread_internal.h"

  /**
   * @}
   */

  // ==========================================================================
  } /* namespace estd */
} /* namespace os */

namespace std
{
  // Define a std::hash specialisation.
  template<>
    struct hash<os::estd::thread::id> : public std::unary_function<
        os::estd::thread::id, size_t>
    {
      inline size_t
      operator() (os::estd::thread::id v) const
      {
        return std::hash<os::estd::thread::native_handle_type> () (
            v.native_thread_);
      }
    };
}

#if defined(OS_HAS_STD_THREADS)

namespace std
{
  /**
   * @ingroup cmsis-plus-iso
   * @{
   */

#include "thread_internal.h"

  // Define a std::hash specialisation.
  template<>
    struct hash<std::thread::id> : public std::unary_function<std::thread::id,
        size_t>
    {
      inline size_t
      operator() (std::thread::id v) const
      {
        return std::hash<std::thread::native_handle_type> () (v.native_thread_);
      }
    };

/**
 * @}
 */
}

#endif

// ----------------------------------------------------------------------------

#endif /* CMSIS_PLUS_ESTD_THREAD_ */
