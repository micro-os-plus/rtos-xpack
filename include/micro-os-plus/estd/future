/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * The code is inspired by LLVM libcxx and GNU libstdc++-v3.
 */

#ifndef CMSIS_PLUS_ESTD_FUTURE_
#define CMSIS_PLUS_ESTD_FUTURE_

// NOTICE: Not yet implemented!

#include <micro-os-plus/rtos/os.h>
#include <micro-os-plus/diag/trace.h>

namespace os
{
  namespace estd
  {
    // ======================================================================

    enum class future_errc
    {
      broken_promise,
      future_already_retrieved,
      promise_already_satisfied,
      no_state,
    };

    enum class launch
    {
      async = 1, //
      deferred = 2, //
      any = async | deferred
    };

    enum class future_status
    {
      ready, //
      timeout, //
      deferred
    };

    template<>
      struct is_error_code_enum<future_errc> : public true_type
      {
      };

    error_code
    make_error_code (future_errc e) noexcept;

    error_condition
    make_error_condition (future_errc e) noexcept;

    const error_category&
    future_category () noexcept;

    class future_error : public logic_error
    {
    public:

      future_error (error_code ec);  // exposition only

      const error_code&
      code () const noexcept;
      const char*
      what () const noexcept;
    };

    template<class R>
      class promise
      {
      public:

        promise ();

        template<class Allocator>
          promise (allocator_arg_t, const Allocator& a);

        promise (promise&& rhs) noexcept;
        promise (const promise& rhs) = delete;

        ~promise ();

        // assignment
        promise&
        operator= (promise&& rhs) noexcept;
        promise&
        operator= (const promise& rhs) = delete;

        void
        swap (promise& other) noexcept;

        // retrieving the result
        future<R>
        get_future ();

        // setting the result
        void
        set_value (const R& r);

        void
        set_value (R&& r);

        void
        set_exception (exception_ptr p);

        // setting the result with deferred notification
        void
        set_value_at_thread_exit (const R& r);

        void
        set_value_at_thread_exit (R&& r);

        void
        set_exception_at_thread_exit (exception_ptr p);
      };

    template<class R>
      class promise<R&>
      {
      public:

        promise ();

        template<class Allocator>
          promise (allocator_arg_t, const Allocator& a);

        promise (promise&& rhs) noexcept;
        promise (const promise& rhs) = delete;

        ~promise ();

        // assignment
        promise&
        operator= (promise&& rhs) noexcept;

        promise&
        operator= (const promise& rhs) = delete;

        void
        swap (promise& other) noexcept;

        // retrieving the result
        future<R&>
        get_future ();

        // setting the result
        void
        set_value (R& r);

        void
        set_exception (exception_ptr p);

        // setting the result with deferred notification
        void
        set_value_at_thread_exit (R&);

        void
        set_exception_at_thread_exit (exception_ptr p);
      };

    template<>
      class promise<void>
      {
      public:

        promise ();

        template<class Allocator>
          promise (allocator_arg_t, const Allocator& a);

        promise (promise&& rhs) noexcept;
        promise (const promise& rhs) = delete;

        ~promise ();

        // assignment
        promise&
        operator= (promise&& rhs) noexcept;
        promise&
        operator= (const promise& rhs) = delete;

        void
        swap (promise& other) noexcept;

        // retrieving the result
        future<void>
        get_future ();

        // setting the result
        void
        set_value ();

        void
        set_exception (exception_ptr p);

        // setting the result with deferred notification
        void
        set_value_at_thread_exit ();

        void
        set_exception_at_thread_exit (exception_ptr p);
      };

    template<class R>
      void
      swap (promise<R>& x, promise<R>& y) noexcept;

    template<class R, class Alloc>
      struct uses_allocator<promise<R>, Alloc> : public true_type
      {
      };

    template<class R>
      class future
      {
      public:

        future () noexcept;
        future (future&&) noexcept;
        future (const future& rhs) = delete;
        ~future ();
        future&
        operator= (const future& rhs) = delete;
        future&
        operator= (future&&) noexcept;

        shared_future<R>
        share ();

        // retrieving the value
        R
        get ();

        // functions to check state
        bool
        valid () const noexcept;

        void
        wait () const;

        template<class Rep, class Period>
          future_status
          wait_for (const chrono::duration<Rep, Period>& rel_time) const;

        template<class Clock, class Duration>
          future_status
          wait_until (
              const chrono::time_point<Clock, Duration>& abs_time) const;
      };

    template<class R>
      class future<R&>
      {
      public:

        future () noexcept;
        future (future&&) noexcept;
        future (const future& rhs) = delete;
        ~future ();
        future&
        operator= (const future& rhs) = delete;
        future&
        operator= (future&&) noexcept;

        shared_future<R&>
        share ();

        // retrieving the value
        R&
        get ();

        // functions to check state
        bool
        valid () const noexcept;

        void
        wait () const;

        template<class Rep, class Period>
          future_status
          wait_for (const chrono::duration<Rep, Period>& rel_time) const;

        template<class Clock, class Duration>
          future_status
          wait_until (
              const chrono::time_point<Clock, Duration>& abs_time) const;
      };

    template<>
      class future<void>
      {
      public:
        future () noexcept;
        future (future&&) noexcept;
        future (const future& rhs) = delete;
        ~future ();
        future&
        operator= (const future& rhs) = delete;
        future&
        operator= (future&&) noexcept;

        shared_future<void>
        share ();

        // retrieving the value
        void
        get ();

        // functions to check state
        bool
        valid () const noexcept;

        void
        wait () const;

        template<class Rep, class Period>
          future_status
          wait_for (const chrono::duration<Rep, Period>& rel_time) const;

        template<class Clock, class Duration>
          future_status
          wait_until (
              const chrono::time_point<Clock, Duration>& abs_time) const;
      };

    template<class R>
      class shared_future
      {
      public:

        shared_future () noexcept;

        shared_future (const shared_future& rhs);
        shared_future (future<R> &&) noexcept;
        shared_future (shared_future&& rhs) noexcept;

        ~shared_future ();

        shared_future&
        operator= (const shared_future& rhs);
        shared_future&
        operator= (shared_future&& rhs) noexcept;

        // retrieving the value
        const R&
        get () const;

        // functions to check state
        bool
        valid () const noexcept;

        void
        wait () const;

        template<class Rep, class Period>
          future_status
          wait_for (const chrono::duration<Rep, Period>& rel_time) const;

        template<class Clock, class Duration>
          future_status
          wait_until (
              const chrono::time_point<Clock, Duration>& abs_time) const;
      };

    template<class R>
      class shared_future<R&>
      {
      public:

        shared_future () noexcept;
        shared_future (const shared_future& rhs);
        shared_future (future<R&> &&) noexcept;
        shared_future (shared_future&& rhs) noexcept;
        ~shared_future ();
        shared_future&
        operator= (const shared_future& rhs);
        shared_future&
        operator= (shared_future&& rhs) noexcept;

        // retrieving the value
        R&
        get () const;

        // functions to check state
        bool
        valid () const noexcept;

        void
        wait () const;

        template<class Rep, class Period>
          future_status
          wait_for (const chrono::duration<Rep, Period>& rel_time) const;

        template<class Clock, class Duration>
          future_status
          wait_until (
              const chrono::time_point<Clock, Duration>& abs_time) const;
      };

    template<>
      class shared_future<void>
      {
      public:

        shared_future () noexcept;
        shared_future (const shared_future& rhs);
        shared_future (future<void> &&) noexcept;
        shared_future (shared_future&& rhs) noexcept;
        ~shared_future ();
        shared_future&
        operator= (const shared_future& rhs);
        shared_future&
        operator= (shared_future&& rhs) noexcept;

        // retrieving the value
        void
        get () const;

        // functions to check state
        bool
        valid () const noexcept;

        void
        wait () const;

        template<class Rep, class Period>
          future_status
          wait_for (const chrono::duration<Rep, Period>& rel_time) const;

        template<class Clock, class Duration>
          future_status
          wait_until (
              const chrono::time_point<Clock, Duration>& abs_time) const;
      };

    // Instead of decay<F>, the standard specifies:
    // future<typename result_of<F(Args...)>::type>

    template<class F, class ... Args>
      future<typename result_of<typename decay<F>::type
      (typename decay<Args>::type...)>::type>
      async(F&& f, Args&&... args);

    template<class F, class ... Args>
      future<typename result_of<typename decay<F>::type
      (typename decay<Args>::type...)>::type>
      async(launch policy, F&& f, Args&&... args);

    template<class >
      class packaged_task;
    // undefined

    template<class R, class ... ArgTypes>
      class packaged_task<R
      (ArgTypes...)>
      {
      public:

        typedef R result_type;

        // construction and destruction
        packaged_task () noexcept;

        template<class F>
          explicit
          packaged_task (F&& f);

        template<class F, class Allocator>
          packaged_task (allocator_arg_t, const Allocator& a, F&& f);

        ~packaged_task ();

        // no copy
        packaged_task (const packaged_task&) = delete;
        packaged_task&
        operator= (const packaged_task&) = delete;

        // move support
        packaged_task (packaged_task&& other) noexcept;
        packaged_task&
        operator= (packaged_task&& other) noexcept;

        void
        swap (packaged_task& other) noexcept;

        bool
        valid () const noexcept;

        // result retrieval
        future<R>
        get_future ();

        // execution
        void
        operator() (ArgTypes...);

        void
        make_ready_at_thread_exit (ArgTypes...);

        void
        reset ();
      };

    template<class R>
      void
      swap (packaged_task<R
      (ArgTypes...)&, packaged_task<R(ArgTypes...)>&) noexcept;

    template<class R, class Alloc>
      struct uses_allocator<packaged_task<R>, Alloc> ;

  // ----------------------------------------------------------------------

  } /* namespace estd */
} /* namespace os */

// ----------------------------------------------------------------------------

#endif /* CMSIS_PLUS_ESTD_FUTURE_ */
