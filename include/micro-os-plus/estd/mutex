/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * The code is inspired by LLVM libcxx and GNU libstdc++-v3.
 */

#ifndef CMSIS_PLUS_ESTD_MUTEX_
#define CMSIS_PLUS_ESTD_MUTEX_

// ----------------------------------------------------------------------------

// Include the next <mutex> file found in the search path.
#pragma GCC diagnostic push
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wgnu-include-next"
#endif
#include_next <mutex>
#pragma GCC diagnostic pop

#include <tuple>
#include <cerrno>

#include <micro-os-plus/rtos/os.h>

#include <micro-os-plus/estd/system_error>
#include <micro-os-plus/estd/chrono>

// ----------------------------------------------------------------------------

namespace os
{
  namespace estd
  {
    // ------------------------------------------------------------------------

    /**
     * @ingroup cmsis-plus-iso
     * @{
     */

    // ========================================================================
    class mutex
    {
    private:

      using native_type = os::rtos::mutex;

    public:

      using native_handle_type = native_type*;

      /* constexpr in ISO */
      mutex () noexcept;

      ~mutex () = default;

      mutex (const mutex&) = delete;
      mutex&
      operator= (const mutex&) = delete;

      void
      lock ();

      bool
      try_lock ();

      void
      unlock ();

      native_handle_type
      native_handle ();

    protected:

      native_type nm_;
    };

    // ========================================================================

    class recursive_mutex
    {
    private:

      using native_type = os::rtos::mutex;

    public:

      using native_handle_type = native_type*;

      recursive_mutex ();

      ~recursive_mutex () = default;

      recursive_mutex (const recursive_mutex&) = delete;
      recursive_mutex&
      operator= (const recursive_mutex&) = delete;

      void
      lock ();

      bool
      try_lock () noexcept;

      void
      unlock ();

      native_handle_type
      native_handle ();

    protected:

      native_type nm_;
    };

    // ========================================================================

    class timed_mutex : public mutex
    {
    public:

      timed_mutex () = default;

      ~timed_mutex () = default;

      timed_mutex (const timed_mutex&) = delete;
      timed_mutex&
      operator= (const timed_mutex&) = delete;

      template<typename Rep_T, typename Period_T>
        bool
        try_lock_for (const std::chrono::duration<Rep_T, Period_T>& rel_time);

      template<typename Clock_T, typename Duration_T>
        bool
        try_lock_until (
            const std::chrono::time_point<Clock_T, Duration_T>& abs_time);
    };

    // ========================================================================

    class recursive_timed_mutex : recursive_mutex
    {
    public:

      recursive_timed_mutex () = default;

      ~recursive_timed_mutex () = default;

      recursive_timed_mutex (const recursive_timed_mutex&) = delete;
      recursive_timed_mutex&
      operator= (const recursive_timed_mutex&) = delete;

      template<typename Rep_T, typename Period_T>
        bool
        try_lock_for (const std::chrono::duration<Rep_T, Period_T>& rel_time);

      template<typename Clock_T, typename Duration_T>
        bool
        try_lock_until (
            const std::chrono::time_point<Clock_T, Duration_T>& abs_time);
    };

    /**
     * @}
     */

    // ========================================================================
    // Inline & template implementations.
    // ========================================================================
    inline
    mutex::mutex () noexcept
    {
      ;
    }

    inline mutex::native_handle_type
    mutex::native_handle ()
    {
      return &nm_;
    }

    // ========================================================================

    inline
    recursive_mutex::recursive_mutex () :
        nm_
          { os::rtos::mutex::initializer_recursive }
    {
      ;
    }

    inline recursive_mutex::native_handle_type
    recursive_mutex::native_handle ()
    {
      return &nm_;
    }

    // ========================================================================

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Waggregate-return"

    template<typename Rep_T, typename Period_T>
      bool
      timed_mutex::try_lock_for (
          const std::chrono::duration<Rep_T, Period_T>& rel_time)
      {
        using namespace std::chrono;
        os::rtos::clock::duration_t ticks = 0;
        if (rel_time > duration<Rep_T, Period_T>::zero ())
          {
            ticks =
                static_cast<os::rtos::clock::duration_t> (os::estd::chrono::ceil<
                    os::estd::chrono::systicks> (rel_time).count ());
          }

        os::rtos::result_t res;
        res = nm_.timed_lock (ticks);
        if (res == os::rtos::result::ok)
          {
            return true;
          }
        else if (res == ETIMEDOUT)
          {
            return false;
          }

        os::estd::__throw_system_error (static_cast<int> (res),
                                        "timed_mutex try_lock failed");
        return false;
      }

    template<typename Clock_T, typename Duration_T>
      bool
      timed_mutex::try_lock_until (
          const std::chrono::time_point<Clock_T, Duration_T>& abs_time)
      {
        using clock = Clock_T;

        auto now = clock::now ();
        while (now < abs_time)
          {
            if (try_lock_for (abs_time - now))
              {
                return true;
              }
            now = clock::now ();
          }

        return false;
      }

#pragma GCC diagnostic pop

    // ========================================================================

    template<typename Rep_T, typename Period_T>
      bool
      recursive_timed_mutex::try_lock_for (
          const std::chrono::duration<Rep_T, Period_T>& rel_time)
      {
        using namespace std::chrono;
        os::rtos::clock::duration_t ticks = 0;
        if (rel_time > duration<Rep_T, Period_T>::zero ())
          {
            ticks =
                static_cast<os::rtos::clock::duration_t> (os::estd::chrono::ceil<
                    os::estd::chrono::systicks> (rel_time).count ());
          }

        os::rtos::result_t res;
        res = nm_.timed_lock (ticks);
        if (res == os::rtos::result::ok)
          {
            return true;
          }
        else if (res == ETIMEDOUT)
          {
            return false;
          }

        os::estd::__throw_system_error (static_cast<int> (res),
                                        "timed_mutex try_lock failed");
        return false;
      }

    template<typename Clock_T, typename Duration_T>
      bool
      recursive_timed_mutex::try_lock_until (
          const std::chrono::time_point<Clock_T, Duration_T>& abs_time)
      {
        using clock = Clock_T;

        auto now = clock::now ();
        while (now < abs_time)
          {
            if (try_lock_for (abs_time - now))
              {
                return true;
              }
            now = clock::now ();
          }

        return false;
      }

  // ==========================================================================
  } /* namespace estd */
} /* namespace os */

#if defined(OS_HAS_STD_THREADS)

namespace std
{
  /**
   * @ingroup cmsis-plus-iso
   * @{
   */

  // Redefine the objects in the std:: namespace.

  using mutex = os::estd::mutex;
  using recursive_mutex = os::estd::recursive_mutex;
  using timed_mutex = os::estd::timed_mutex;
  using recursive_timed_mutex = os::estd::recursive_timed_mutex;

  /**
   * @}
   */
}

#endif

// ----------------------------------------------------------------------------

#endif /* CMSIS_PLUS_ESTD_MUTEX_ */
